# –ë–æ—Ç-—Å—Ç–∏–ª–∏—Å—Ç:
# 1. –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –¥–Ω—è
# 2. –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã –Ω–∞ –¥–µ–Ω—å
# 3. –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∏–ª—é (AI - ChatGPT)
# 4. –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∏–ª—é (AI - ChatGPT)

import asyncio
import requests
from bs4 import BeautifulSoup
import telebot
from openai import OpenAI
from gtts import gTTS
from io import BytesIO
import speech_recognition as sr
import os
import subprocess
import random
from telebot import types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(
    api_key="my_key",
    base_url="https://api.proxyapi.ru/openai/v1",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
API_TOKEN = 'BOT_API_TOKEN'
bot = telebot.TeleBot(API_TOKEN)

# –°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤
colors = [
    "üå∏ –ù–µ–∂–Ω–æ-–≥–æ–ª—É–±–æ–π üå∏", "üçØ –°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ üçØ", "üå∑ –°–≤–µ–∂–∏–π –ø–µ—Ä—Å–∏–∫ üå∑",
    "üçá –¢–µ–º–Ω—ã–π –≤–∏–Ω–æ–≥—Ä–∞–¥ üçá", "üå∫ –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π –±—Ä–∏–∑ üå∫", "üçÉ –õ–µ—Å–Ω–∞—è –∑–µ–ª–µ–Ω—å üçÉ",
    "üåª –°–æ–ª–Ω–µ—á–Ω—ã–π –∑–∞–∫–∞—Ç üåª", "üçë –ü–µ—Ä—Å–∏–∫–æ–≤—ã–π –ø—É–¥–∏–Ω–≥ üçë", "üå∏ –†–æ–∑–æ–≤—ã–π –∫–≤–∞—Ä—Ü üå∏",
    "üçÇ –û—Å–µ–Ω–Ω–∏–π –ª–∏—Å—Ç üçÇ", "üåä –ú–æ—Ä—Å–∫–∞—è –≤–æ–ª–Ω–∞ üåä", "üçã –õ–∏–º–æ–Ω–Ω—ã–π —Å–≤–µ—Ç üçã",
    "üå∑ –û—Ä—Ö–∏–¥–µ—è –≤ —Ç—É–º–∞–Ω–µ üå∑", "üçá –í–∏—à–Ω–µ–≤—ã–π –ø–∏—Ä–æ–≥ üçá", "üå∫ –°–∏—Ä–µ–Ω–µ–≤—ã–π —Ç—É–º–∞–Ω üå∫",
    "üçÉ –ò–∑—É–º—Ä—É–¥–Ω—ã–π –ª–µ—Å üçÉ", "üåª –ó–æ–ª–æ—Ç–∞—è –ø—ã–ª—å üåª", "üçë –ê–±—Ä–∏–∫–æ—Å–æ–≤—ã–π —Ä–∞—Å—Å–≤–µ—Ç üçë",
    "üå∏ –†–æ–∑–æ–≤–∞—è –¥—ã–º–∫–∞ üå∏", "üçÇ –ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å üçÇ", "üåä –û–∫–µ–∞–Ω—Å–∫–∞—è –≥–ª–∞–¥—å üåä",
    "üçã –°–æ–ª–Ω–µ—á–Ω—ã–π –ª–∏–º–æ–Ω üçã", "üå∑ –õ–∞–≤–∞–Ω–¥–æ–≤–æ–µ –ø–æ–ª–µ üå∑", "üçá –í–∏–Ω–Ω—ã–π –±–∞—Ä—Ö–∞—Ç üçá",
    "ü™© –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –¥–æ–∂–¥—å üíç"
]

# –°–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–µ–∂–¥—ã
tops = ["–§—É—Ç–±–æ–ª–∫–∞", "–†—É–±–∞—à–∫–∞", "–°–≤–∏—Ç–µ—Ä", "–¢–æ–ø", "–ë–ª—É–∑–∫–∞", "–¢—É–Ω–∏–∫–∞", "–ö–∞—Ä–¥–∏–≥–∞–Ω", "–î–∂–µ–º–ø–µ—Ä", "–•—É–¥–∏", "–ñ–∏–ª–µ—Ç"]
bottoms = ["–î–∂–∏–Ω—Å—ã", "–ë—Ä—é–∫–∏", "–®–æ—Ä—Ç—ã", "–Æ–±–∫–∞", "–õ–µ–≥–∏–Ω—Å—ã", "–ö–∞–ø—Ä–∏", "–ë—Ä–∏–¥–∂–∏", "–°–∞—Ä–∞—Ñ–∞–Ω", "–ö–æ–º–±–∏–Ω–µ–∑–æ–Ω", "–®—Ç–∞–Ω—ã"]
shoes = ["–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–¢—É—Ñ–ª–∏", "–°–∞–Ω–¥–∞–ª–∏–∏", "–ë–æ—Ç–∏–Ω–∫–∏", "–ë–∞–ª–µ—Ç–∫–∏", "–°–∞–ø–æ–≥–∏", "–®–ª–µ–ø–∞–Ω—Ü—ã", "–ë–æ—Å–æ–Ω–æ–∂–∫–∏", "–ú–æ–∫–∞—Å–∏–Ω—ã", "–ö–µ–¥—ã"]
headwear = ["–ö–µ–ø–∫–∞", "–®–ª—è–ø–∞", "–ë–µ—Ä–µ—Ç", "–ü–∞–Ω–∞–º–∞", "–ë–µ–π—Å–±–æ–ª–∫–∞", "–ë–∞–Ω–¥–∞–Ω–∞", "–ü–ª–∞—Ç–æ–∫", "–®–∞–ø–∫–∞", "–ö–∞–ø—é—à–æ–Ω", "–¢—é—Ä–±–∞–Ω"]
accessories = ["–°—É–º–∫–∞", "–†—é–∫–∑–∞–∫", "–û—á–∫–∏", "–®–∞—Ä—Ñ", "–ë—Ä–∞—Å–ª–µ—Ç", "–ö–æ–ª—å–µ", "–°–µ—Ä—å–≥–∏", "–ü–µ—Ä—á–∞—Ç–∫–∏", "–ß–∞—Å—ã"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
def get_chat_response(messages):
    chat_completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    return chat_completion.choices[0].message.content

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
chat_histories = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞
def get_latest_news():
    url = 'https://www.buro247.ru/news'  # –£–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π URL –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    # –ù–∞–π–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
    news_items = soup.find_all('div', class_='newsPreviewPhoto')
    if news_items:
        latest_news = news_items[0]
        title = latest_news.find('h4').get_text(strip=True)
        link = latest_news.find('a', class_='image-wrap')['href']
        full_link = f"https://www.buro247.ru{link}"
        return f"{title}\n{full_link}"
    else:
        return "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
def transcribe_audio(audio_path):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
    wav_path = audio_path.replace(".ogg", ".wav")
    ffmpeg_path = r"C:\ffmpeg\bin\ffmpeg.exe" # –ø—É—Ç—å –¥–æ ffmpeg.exe –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
    subprocess.run([ffmpeg_path, '-i', audio_path, wav_path])

    recognizer = sr.Recognizer()
    with sr.AudioFile(wav_path) as source:
        audio = recognizer.record(source)
        try:
            return recognizer.recognize_google(audio, language="ru-RU")
        except sr.UnknownValueError:
            return "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        except sr.RequestError:
            return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–¶–≤–µ—Ç –¥–Ω—è'))
    markup.row(types.KeyboardButton('–ö–æ–º–ø–ª–µ–∫—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'))
    markup.row(types.KeyboardButton('–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥'))
    markup.row(types.KeyboardButton('–ì–æ–ª–æ—Å–æ–≤–æ–π –¥–∏–∞–ª–æ–≥'))
    markup.row(types.KeyboardButton('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-—Å—Ç–∏–ª–∏—Å—Ç. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    chat_id = message.chat.id

    if message.text == '–¶–≤–µ—Ç –¥–Ω—è':
        selected_color = random.choice(colors)
        bot.send_message(chat_id, f"–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è —É–∫—Ä–∞—Å–∏—Ç —Ü–≤–µ—Ç: {selected_color}")

    elif message.text == '–ö–æ–º–ø–ª–µ–∫—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        selected_top = random.choice(tops)
        selected_bottom = random.choice(bottoms)
        selected_shoes = random.choice(shoes)
        selected_headwear = random.choice(headwear)
        selected_accessory = random.choice(accessories)

        clouth_message = (
            f"–¢–≤–æ–π –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"–í–µ—Ä—Ö: {selected_top}\n"
            f"–ù–∏–∑: {selected_bottom}\n"
            f"–û–±—É–≤—å: {selected_shoes}\n"
            f"–ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä: {selected_headwear}\n"
            f"–ê–∫—Å–µ—Å—Å—É–∞—Ä: {selected_accessory}"
        )
        bot.send_message(chat_id, clouth_message)

    elif message.text == '–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥':
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:")
        bot.register_next_step_handler(message, handle_text_message)

    elif message.text == '–ì–æ–ª–æ—Å–æ–≤–æ–π –¥–∏–∞–ª–æ–≥':
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        bot.register_next_step_handler(message, handle_voice_message)

    elif message.text == '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞ BURO.':
        news = get_latest_news()
        bot.send_message(chat_id, news)

    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text_message(message):
    chat_id = message.chat.id
    user_message = message.text

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    # –ó–∞–¥–∞—é TOV –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π AI —Å—Ç–∏–ª–∏—Å—Ç–∞
    if chat_id not in chat_histories:
        chat_histories[chat_id] = [{"role": "system", "content": \
            "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–Ω–∞—è —Å—Ç–∏–ª–∏—Å—Ç–∫–∞ –∏ –±–ª–∏–∑–∫–∞—è –ø–æ–¥—Ä—É–≥–∞, \
            –¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –∏ –ö–†–ê–¢–ö–ò–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –≤ –æ–¥–µ–∂–¥–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞—Ö. \
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç–∞—Ö."}]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "user", "content": user_message})

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    response = get_chat_response(chat_histories[chat_id])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if response is not None:
        bot.reply_to(message, response)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "assistant", "content": response})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_voice_message(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π, –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç–µ–±–µ –æ—Ç–≤–µ—Ç!")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    audio_path = f"voice_message_{chat_id}.ogg"
    with open(audio_path, 'wb') as f:
        f.write(downloaded_file)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
    user_message = transcribe_audio(audio_path)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    os.remove(audio_path)
    os.remove(audio_path.replace(".ogg", ".wav"))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    # –ó–∞–¥–∞—é TOV –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π AI —Å—Ç–∏–ª–∏—Å—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö - –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!)
    if chat_id not in chat_histories:
        chat_histories[chat_id] = [{"role": "system", "content": \
            "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–Ω–∞—è —Å—Ç–∏–ª–∏—Å—Ç–∫–∞ –∏ –±–ª–∏–∑–∫–∞—è –ø–æ–¥—Ä—É–≥–∞, \
            –¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –∏ –ö–†–ê–¢–ö–ò–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –≤ –æ–¥–µ–∂–¥–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞—Ö. \
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç–∞—Ö."}]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "user", "content": user_message})

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    response = get_chat_response(chat_histories[chat_id])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if response is not None:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
        tts = gTTS(text=response, lang='ru')
        audio = BytesIO()
        tts.write_to_fp(audio)
        audio.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_voice(chat_id, audio)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "assistant", "content": response})

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling()
